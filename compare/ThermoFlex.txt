def query(self, msg_bytes):
    """Send a command to the serial device and subsequently read the reply.

    Args:
        msg_bytes (bytes): Message to be sent to the serial device.

    Returns:
        success (bool): True if successful, False otherwise.
        ans_bytes (bytes): Reply received from the device. [numpy.nan] if
            unsuccessful.

    TO DO: force ser.flush after ser.write
    """
    success = False
    ans_bytes = np.nan

    if not self.is_alive:
        pft("Device is not connected yet or already closed.", 3)
        return [success, ans_bytes]

    try:
        # Send command string to the device as bytes
        self.ser.write(msg_bytes)
    except (serial.SerialTimeoutException, serial.SerialException) as err:
        # Print error and struggle on
        pft(err, 3)
    except Exception as err:
        pft(err, 3)
        sys.exit(0)
    else:
        # Wait for the incoming buffer to fill with the device's complete
        # reply. Note: The chiller does not use an EOL character to signal
        # the end of line, hence we can't use ser.readline().
        time.sleep(RS232_SLEEP)

        try:
            # Read all the bytes waiting in the in-buffer
            ans_bytes = self.ser.read(self.ser.inWaiting())
            # print_as_hex(ans_bytes)                     # debug info
        except (
            serial.SerialTimeoutException,
            serial.SerialException,
        ) as err:
            pft(err, 3)
        except Exception as err:
            pft(err, 3)
            sys.exit(0)
        else:
            # Check for errors reported by a possibly connected ThermoFlex
            # chiller
            if (len(ans_bytes) >= 4) and ans_bytes[3] == 0x0F:
                # Error reported by chiller
                if ans_bytes[5] == 1:
                    pft("Bad command received by chiller", 3)
                elif ans_bytes[5] == 2:
                    pft("Bad data received by chiller", 3)
                elif ans_bytes[5] == 3:
                    pft("Bad checksum received by chiller", 3)
            else:
                # We got a reply back from /a/ device, not necessarily a
                # ThermoFlex chiller.
                success = True

    return [success, ans_bytes]