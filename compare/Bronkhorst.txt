def query(self, msg_str):
    """Send a command to the serial device and subsequently read the reply.

    Args:
        msg_str (str): Message to be sent to the serial device.

    Returns:
        success (bool): True if successful, False otherwise.
        ans_str (str): Reply received from the device. None if unsuccessful.
    """
    success = False
    ans_str = None

    if not self.is_alive:
        pft("Device is not connected yet or already closed.", 3)
        return [success, ans_str]

    try:
        # Send command string to the device as bytes
        self.ser.write(msg_str.replace(" ", "").encode())
    except (serial.SerialTimeoutException, serial.SerialException,) as err:
        # Print error and struggle on
        pft(err, 3)
    except Exception as err:
        pft(err, 3)
        sys.exit(0)
    else:
        try:
            # Read all bytes in the line that is terminated with a
            # newline character or until time-out has occured
            ans_bytes = self.ser.readline()
        except (
            serial.SerialTimeoutException,
            serial.SerialException,
        ) as err:
            pft(err, 3)
        except Exception as err:
            pft(err, 3)
            sys.exit(0)
        else:
            # Convert bytes into string and remove termination chars and
            # spaces
            ans_str = ans_bytes.decode().strip()
            success = True

    return [success, ans_str]